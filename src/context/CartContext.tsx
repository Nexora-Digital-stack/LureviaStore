import React, { createContext, useContext, useEffect, useState } from "react";
import products from "../data/products"; // adjust import path if necessary

// Types
interface Product {
  _id: string;
  name: string;
  price: number;
  image: string;
  category: string;
  inStock: boolean;
}

interface CartItem {
  _id: string;          // Cart Item ID, generated by us
  productId: string;
  quantity: number;
  product: Product | null;
}

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (productId: string, quantity: number) => void;
  updateCartItem: (itemId: string, quantity: number) => void;
  removeFromCart: (itemId: string) => void;
  clearCart: () => void;
  cartTotal: number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

const CART_STORAGE_KEY = "cartItems";

function loadCartFromStorage(): Omit<CartItem, "product">[] {
  try {
    const data = localStorage.getItem(CART_STORAGE_KEY);
    return data ? JSON.parse(data) : [];
  } catch {
    return [];
  }
}

function saveCartToStorage(items: Omit<CartItem, "product">[]) {
  localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(items));
}

export function CartProvider({ children }: { children: React.ReactNode }) {
  const [cartCoreItems, setCartCoreItems] = useState<Omit<CartItem, "product">[]>([]);

  // Load cart from storage only on mount
  useEffect(() => {
    setCartCoreItems(loadCartFromStorage());
  }, []);

  // Save cart to storage whenever it changes
  useEffect(() => {
    saveCartToStorage(cartCoreItems);
  }, [cartCoreItems]);

  // Helper: enrich cart items with product details
  const cartItems: CartItem[] = cartCoreItems.map(item => ({
    ...item,
    product: products.find(product => product._id === item.productId) || null,
  }));

  // Add to cart (add new or increase quantity)
  const addToCart = (productId: string, quantity: number) => {
    setCartCoreItems(prev => {
      // If item already in cart, increase quantity
      const existing = prev.find(item => item.productId === productId);
      if (existing) {
        return prev.map(item =>
          item.productId === productId
            ? { ...item, quantity: item.quantity + quantity }
            : item
        );
      }
      // Add new item
      const newItem: Omit<CartItem, "product"> = {
        _id: Math.random().toString(36).substr(2, 9),
        productId,
        quantity,
      };
      return [...prev, newItem];
    });
  };

  // Update quantity of cart item
  const updateCartItem = (itemId: string, quantity: number) => {
    setCartCoreItems(prev =>
      prev.map(item =>
        item._id === itemId ? { ...item, quantity } : item
      )
    );
  };

  // Remove item from cart
  const removeFromCart = (itemId: string) => {
    setCartCoreItems(prev => prev.filter(item => item._id !== itemId));
  };

  // Clear cart
  const clearCart = () => setCartCoreItems([]);

  // Calculate total
  const cartTotal = cartItems.reduce(
    (total, item) => total + (item.product?.price || 0) * item.quantity,
    0
  );

  return (
    <CartContext.Provider
      value={{
        cartItems,
        addToCart,
        updateCartItem,
        removeFromCart,
        clearCart,
        cartTotal,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
}
